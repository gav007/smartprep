[
  {
    "type": "MC",
    "question": "What is the correct syntax to declare a comment in C?",
    "options": {
      "A": "// This is a comment",
      "B": "<!-- This is a comment -->",
      "C": "# This is a comment",
      "D": "/* This is a comment"
    },
    "answer": "A",
    "feedback": "Single line comments in C start with //."
  },
  {
    "type": "MC",
    "question": "What is a constant in C programming?",
    "options": {
      "A": "A variable that can change value",
      "B": "A fixed value that cannot change during program execution",
      "C": "A function",
      "D": "A loop control variable"
    },
    "answer": "B",
    "feedback": "Constants hold values that do not change."
  },
  {
    "type": "MC",
    "question": "Which line contains a syntax error in the following C code? \n``` int main() { x = 0; if(x < 10) printf(\"Value: %d\\n\", x); x++; return 0; } ```",
    "options": {
      "A": "x = 0;",
      "B": "if(x < 10)",
      "C": "printf(\"Value: %d\\n\", x);",
      "D": "None of the above"
    },
    "answer": "A",
    "feedback": "Variable x is used without being declared."
  },
  {
    "type": "MC",
    "question": "What does the 'if-else' statement do in C?",
    "options": {
      "A": "Loops through code",
      "B": "Decides between two paths based on a condition",
      "C": "Declares variables",
      "D": "Comments code"
    },
    "answer": "B",
    "feedback": "It executes code conditionally."
  },
  {
    "type": "MC",
    "question": "What will be displayed by the following C code?\n```int x = 1, y = 2; if( x < 5 || y > 10) { y = y + 10; } printf(\"%d\", y);```",
    "options": {
      "A": "2",
      "B": "12",
      "C": "1",
      "D": "11"
    },
    "answer": "B",
    "feedback": "The condition is true, so y becomes 12."
  },
  {
    "type": "MC",
    "question": "What is the purpose of a loop in C programming?",
    "options": {
      "A": "To perform a task multiple times",
      "B": "To declare variables",
      "C": "To end a program",
      "D": "To comment code"
    },
    "answer": "A",
    "feedback": "Loops repeat code execution."
  },
  {
    "type": "MC",
    "question": "Which of these is a valid for loop to print numbers 2 to 4?",
    "options": {
      "A": "for(int i=2; i<=4; i++) printf(\"%d\", i);",
      "B": "for(int i=2; i<4; i++) printf(\"%d\", i);",
      "C": "for(int i=4; i>=2; i--) printf(\"%d\", i);",
      "D": "for(int i=0; i<2; i++) printf(\"%d\", i);"
    },
    "answer": "A",
    "feedback": "This loop correctly iterates from 2 to 4."
  },
  {
    "type": "MC",
    "question": "In C, what does the 'do-while' loop guarantee?",
    "options": {
      "A": "The loop runs zero or more times",
      "B": "The loop runs at least once",
      "C": "The loop runs only once",
      "D": "The loop runs infinitely"
    },
    "answer": "B",
    "feedback": "do-while executes the block at least once before checking the condition."
  },
  {
    "type": "MC",
    "question": "What is the purpose of a function in C?",
    "options": {
      "A": "To group reusable code",
      "B": "To declare variables",
      "C": "To run the main program",
      "D": "To print output"
    },
    "answer": "A",
    "feedback": "Functions modularize code for reuse."
  },
  {
    "type": "MC",
    "question": "What is the meaning of 'pass-by-value' in C functions?",
    "options": {
      "A": "Passing the memory address of a variable",
      "B": "Passing a copy of the variable's value",
      "C": "Passing the variable as a global",
      "D": "Passing no arguments"
    },
    "answer": "B",
    "feedback": "Pass-by-value sends a copy, so changes do not affect the original variable."
  },
  {
    "type": "MC",
    "question": "How do you declare an array of 1000 integers initialized to 0 in C?",
    "options": {
      "A": "int arr[1000] = {0};",
      "B": "int arr = 1000;",
      "C": "array arr[1000];",
      "D": "int arr[1000];"
    },
    "answer": "A",
    "feedback": "This declares and initializes all elements to zero."
  },
  {
    "type": "MC",
    "question": "What is a pointer in C?",
    "options": {
      "A": "A variable that stores memory address",
      "B": "A data type",
      "C": "A constant value",
      "D": "A function"
    },
    "answer": "A",
    "feedback": "Pointers hold addresses of other variables."
  },
  {
    "type": "MC",
    "question": "How is a file pointer used in C?",
    "options": {
      "A": "To store file data",
      "B": "To point to a file stream for input/output",
      "C": "To declare files",
      "D": "To encrypt files"
    },
    "answer": "B",
    "feedback": "File pointers manage reading/writing file streams."
  },
  {
    "type": "MC",
    "question": "What does the following code output?\n```int i, z=0; for(i=2; i<=6; i++) z = z + i; printf(\"%d\", z);```",
    "options": {
      "A": "14",
      "B": "18",
      "C": "20",
      "D": "16"
    },
    "answer": "C",
    "feedback": "Sum of 2+3+4+5+6 is 20."
  },
  {
    "type": "MC",
    "question": "How do you open a file for writing in C?",
    "options": {
      "A": "FILE *f = fopen(\"file.txt\", \"r\");",
      "B": "FILE *f = fopen(\"file.txt\", \"w\");",
      "C": "open_file(\"file.txt\");",
      "D": "FILE *f = open(\"file.txt\");"
    },
    "answer": "B",
    "feedback": "Mode \"w\" opens a file for writing."
  },
  {
    "type": "MC",
    "question": "What will the printf statement display after the following function call?\n```void decrement(int x) { x -= 2; } int val = 10; decrement(val); printf(\"%d\", val);```",
    "options": {
      "A": "8",
      "B": "10",
      "C": "12",
      "D": "2"
    },
    "answer": "B",
    "feedback": "Pass-by-value means val remains unchanged."
  },
  {
    "type": "MC",
    "question": "What is the purpose of an array in C?",
    "options": {
      "A": "To store multiple values of the same type in contiguous memory",
      "B": "To store multiple types of variables",
      "C": "To declare variables",
      "D": "To write functions"
    },
    "answer": "A",
    "feedback": "Arrays hold a fixed-size collection of same-type elements."
  },
  {
    "type": "MC",
    "question": "Which data type is used to store single characters in C?",
    "options": {
      "A": "int",
      "B": "char",
      "C": "float",
      "D": "double"
    },
    "answer": "B",
    "feedback": "'char' stores single characters."
  },
  {
    "type": "MC",
    "question": "What does the 'break' statement do inside loops?",
    "options": {
      "A": "Skips the current iteration",
      "B": "Exits the loop immediately",
      "C": "Restarts the loop",
      "D": "Ends the program"
    },
    "answer": "B",
    "feedback": "Break exits the loop prematurely."
  },
  {
    "type": "MC",
    "question": "Which keyword is used to define a constant value in C?",
    "options": {
      "A": "constant",
      "B": "const",
      "C": "static",
      "D": "final"
    },
    "answer": "B",
    "feedback": "'const' defines constants."
  },
  {
    "type": "MC",
    "question": "What is the size of an 'int' data type on most systems?",
    "options": {
      "A": "1 byte",
      "B": "2 bytes",
      "C": "4 bytes",
      "D": "8 bytes"
    },
    "answer": "C",
    "feedback": "Typically, 'int' occupies 4 bytes."
  },
  {
    "type": "MC",
    "question": "What is the purpose of the 'return' statement in a function?",
    "options": {
      "A": "To call another function",
      "B": "To end function execution and return a value",
      "C": "To declare a variable",
      "D": "To start a loop"
    },
    "answer": "B",
    "feedback": "Return ends a function and optionally passes back a value."
  },
  {
    "type": "MC",
    "question": "Which operator is used for logical AND in C?",
    "options": {
      "A": "&&",
      "B": "||",
      "C": "!",
      "D": "&"
    },
    "answer": "A",
    "feedback": "'&&' is logical AND."
  },
  {
    "type": "MC",
    "question": "How do you declare a function that takes two integers and returns an integer?",
    "options": {
      "A": "int func(int a, int b);",
      "B": "void func(int a, int b);",
      "C": "int func(void);",
      "D": "void func(void);"
    },
    "answer": "A",
    "feedback": "This declares a function returning int and taking two ints."
  },
  {
    "type": "MC",
    "question": "What does the following code snippet do?\n```int a = 5; int* p = &a; *p = 10; printf(\"%d\", a);```",
    "options": {
      "A": "Prints 5",
      "B": "Prints 10",
      "C": "Prints address of a",
      "D": "Compilation error"
    },
    "answer": "B",
    "feedback": "Pointer modifies 'a' to 10."
  },
  {
    "type": "MC",
    "question": "Which library must be included to use printf in C?",
    "options": {
      "A": "stdlib.h",
      "B": "stdio.h",
      "C": "string.h",
      "D": "math.h"
    },
    "answer": "B",
    "feedback": "stdio.h contains input/output functions like printf."
  },
  {
    "type": "MC",
    "question": "What is the output of the expression (3 > 2) && (2 < 4)?",
    "options": {
      "A": "0",
      "B": "1",
      "C": "3",
      "D": "2"
    },
    "answer": "B",
    "feedback": "Both conditions true results in 1 (true)."
  },
   {
    "type": "MC",
    "question": "What is the default return type of the main function in C?",
    "options": {
      "A": "void",
      "B": "int",
      "C": "char",
      "D": "float"
    },
    "answer": "B",
    "feedback": "The main function returns an int to the operating system."
  },
  {
    "type": "MC",
    "question": "Which of the following is NOT a valid C variable name?",
    "options": {
      "A": "var_1",
      "B": "1var",
      "C": "varOne",
      "D": "VAR"
    },
    "answer": "B",
    "feedback": "Variable names cannot start with a digit."
  },
  {
    "type": "MC",
    "question": "What does the %d format specifier represent in printf?",
    "options": {
      "A": "Floating-point number",
      "B": "String",
      "C": "Integer",
      "D": "Character"
    },
    "answer": "C",
    "feedback": "%d is used to print integers."
  },
  {
    "type": "MC",
    "question": "Which loop guarantees execution at least once?",
    "options": {
      "A": "for",
      "B": "while",
      "C": "do-while",
      "D": "None"
    },
    "answer": "C",
    "feedback": "do-while executes the loop body before checking condition."
  },
  {
    "type": "MC",
    "question": "What will the following code print?\n```int x=5; printf(\"%d\", x++);```",
    "options": {
      "A": "6",
      "B": "5",
      "C": "Error",
      "D": "Undefined"
    },
    "answer": "B",
    "feedback": "Post-increment returns value before incrementing."
  },
  {
    "type": "MC",
    "question": "What does the following pointer expression do?\n```int *p; int a = 5; p = &a; *p = 10;```",
    "options": {
      "A": "Changes the value of a to 10",
      "B": "Creates a new variable p",
      "C": "Changes pointer p to point to 10",
      "D": "Causes a compile error"
    },
    "answer": "A",
    "feedback": "Dereferencing p changes the value of a to 10."
  },
  {
    "type": "MC",
    "question": "Which of these is the correct way to dynamically allocate an array of 10 ints in C?",
    "options": {
      "A": "int *arr = malloc(10);",
      "B": "int arr = malloc(10 * sizeof(int));",
      "C": "int *arr = malloc(10 * sizeof(int));",
      "D": "int arr[10];"
    },
    "answer": "C",
    "feedback": "Dynamic allocation requires pointer and sizeof for correct size."
  },
  {
    "type": "MC",
    "question": "What does the bitwise AND operator (&) do?",
    "options": {
      "A": "Performs logical AND on boolean values",
      "B": "Compares bits and returns 1 only if both bits are 1",
      "C": "Shifts bits to the right",
      "D": "Negates bits"
    },
    "answer": "B",
    "feedback": "Bitwise AND compares bits individually."
  },
  {
    "type": "MC",
    "question": "How do you declare a structure in C?",
    "options": {
      "A": "struct Person { int age; char name[20]; };",
      "B": "structure Person { int age; char name[20]; };",
      "C": "class Person { int age; char name[20]; };",
      "D": "record Person { int age; char name[20]; };"
    },
    "answer": "A",
    "feedback": "'struct' keyword is used to declare a structure."
  },
  {
    "type": "MC",
    "question": "Which file mode opens a file for appending in C?",
    "options": {
      "A": "\"r\"",
      "B": "\"w\"",
      "C": "\"a\"",
      "D": "\"rw\""
    },
    "answer": "C",
    "feedback": "\"a\" mode opens a file to append data at the end."
  },
  {
    "type": "MC",
    "question": "What happens if you forget to free dynamically allocated memory?",
    "options": {
      "A": "Nothing, program runs normally",
      "B": "Memory leak occurs",
      "C": "Compiler error",
      "D": "Program crashes immediately"
    },
    "answer": "B",
    "feedback": "Memory leaks cause wasted memory resources."
  },
  {
    "type": "MC",
    "question": "Which operator shifts bits to the left in C?",
    "options": {
      "A": "&",
      "B": "|",
      "C": "<<",
      "D": ">>"
    },
    "answer": "C",
    "feedback": "The << operator shifts bits left."
  },
  {
    "type": "MC",
    "question": "How do you access a structure member via a pointer?",
    "options": {
      "A": "ptr.member",
      "B": "*ptr.member",
      "C": "ptr->member",
      "D": "&ptr.member"
    },
    "answer": "C",
    "feedback": "Use -> operator to access members via pointer."
  },
  {
    "type": "MC",
    "question": "What is the purpose of the 'fseek' function in C?",
    "options": {
      "A": "Close a file",
      "B": "Move file pointer to a specific location",
      "C": "Read data from a file",
      "D": "Open a file"
    },
    "answer": "B",
    "feedback": "fseek repositions the file pointer."
  },
  {
    "type": "MC",
    "question": "What does the 'typedef' keyword do?",
    "options": {
      "A": "Defines a new data type alias",
      "B": "Declares a variable",
      "C": "Includes header files",
      "D": "Defines a macro"
    },
    "answer": "A",
    "feedback": "typedef creates a new name for an existing type."
  },
  {
    "type": "MC",
    "question": "What is a pointer in C?",
    "options": {
      "A": "A variable that stores a memory address",
      "B": "A type of function",
      "C": "A constant value",
      "D": "An array"
    },
    "answer": "A",
    "feedback": "Pointers store memory addresses of variables."
  },
  {
    "type": "MC",
    "question": "How do you declare an integer pointer named p?",
    "options": {
      "A": "int p;",
      "B": "int *p;",
      "C": "pointer p;",
      "D": "int &p;"
    },
    "answer": "B",
    "feedback": "int *p declares a pointer to an integer."
  },
  {
    "type": "MC",
    "question": "What is the purpose of the 'malloc' function?",
    "options": {
      "A": "Allocate memory dynamically",
      "B": "Initialize variables",
      "C": "Print output",
      "D": "Free memory"
    },
    "answer": "A",
    "feedback": "malloc allocates memory at runtime."
  },
  {
    "type": "MC",
    "question": "Which operator is used to access members of a structure variable?",
    "options": {
      "A": ".",
      "B": "->",
      "C": "&",
      "D": "*"
    },
    "answer": "A",
    "feedback": "Use '.' to access structure members."
  },
  {
    "type": "MC",
    "question": "What does the '->' operator do?",
    "options": {
      "A": "Dereferences a pointer to access structure members",
      "B": "Accesses an array element",
      "C": "Performs bitwise AND",
      "D": "Calls a function"
    },
    "answer": "A",
    "feedback": "The '->' operator accesses structure members via a pointer."
  },
  {
    "type": "MC",
    "question": "What does the 'free' function do?",
    "options": {
      "A": "Allocates memory",
      "B": "Deallocates previously allocated memory",
      "C": "Opens a file",
      "D": "Closes a file"
    },
    "answer": "B",
    "feedback": "free releases memory allocated with malloc."
  },
  {
    "type": "MC",
    "question": "Which of the following opens a file for reading?",
    "options": {
      "A": "fopen(filename, \"w\")",
      "B": "fopen(filename, \"r\")",
      "C": "fopen(filename, \"a\")",
      "D": "fopen(filename, \"rw\")"
    },
    "answer": "B",
    "feedback": "\"r\" mode opens a file for reading."
  },
  {
    "type": "MC",
    "question": "What is the output of this code snippet?\n```int x = 5; printf(\"%d\", ++x);```",
    "options": {
      "A": "5",
      "B": "6",
      "C": "Error",
      "D": "Undefined"
    },
    "answer": "B",
    "feedback": "Pre-increment increases value before printing."
  },
  {
    "type": "MC",
    "question": "What happens when you forget to call free() on allocated memory?",
    "options": {
      "A": "Nothing",
      "B": "Memory leak",
      "C": "Compile error",
      "D": "Crash immediately"
    },
    "answer": "B",
    "feedback": "Not freeing memory causes leaks."
  },
  {
    "type": "MC",
    "question": "Which loop runs as long as its condition is true?",
    "options": {
      "A": "for",
      "B": "while",
      "C": "do-while",
      "D": "switch"
    },
    "answer": "B",
    "feedback": "while loops continue while condition is true."
  }
]
